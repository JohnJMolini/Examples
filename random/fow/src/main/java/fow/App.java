/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fow;

import java.nio.ByteBuffer;

import com.jme3.app.*;
import com.jme3.app.state.ScreenshotAppState;
import com.jme3.light.*;
import com.jme3.material.*;
import com.jme3.math.*;
import com.jme3.scene.*;
import com.jme3.scene.shape.*;
import com.jme3.shader.VarType;
import com.jme3.system.AppSettings;
import com.jme3.texture.*;
import com.jme3.texture.image.*;
import com.jme3.util.BufferUtils;


public class App extends SimpleApplication {

    public static void main(String[] args) throws Exception {
        AppSettings settings = new AppSettings(true);

        // Set some defaults that will get overwritten if
        // there were previously saved settings from the last time the user
        // ran.
        settings.setWidth(1280);
        settings.setHeight(720);
        settings.setVSync(true);

        // Note: JME uses the title to save so these two must match.
        String title = "Fog of War Example";
        settings.load(title);
        settings.setTitle(title);
 
        App main = new App();       
        main.setSettings(settings);
        main.start();
    }
    
    public App() {
        super(new StatsAppState(), new DebugKeysAppState(), new BasicProfilerState(false),
              new FlyCamAppState(),
              new ScreenshotAppState("", System.currentTimeMillis()));
    }
    
    @Override
    public void simpleInitApp() {

        setPauseOnLostFocus(false);
        //setDisplayFps(false);
        //setDisplayStatView(false);

        // Setup camera fly stuff
        stateManager.getState(FlyCamAppState.class).getCamera().setMoveSpeed(10);
        
        // And camera near/far planes 
        float aspect = (float)cam.getWidth() / (float)cam.getHeight(); 
        cam.setFrustumPerspective(45, aspect, 0.1f, 3000);
        
        // Setup lighting
        DirectionalLight sun = new DirectionalLight(new Vector3f(1, -2, 1.5f).normalizeLocal(), ColorRGBA.White);
        rootNode.addLight(sun);
        AmbientLight ambient = new AmbientLight(ColorRGBA.Gray);
        rootNode.addLight(ambient);

        // Setup the scene
        //String matDef = "Common/MatDefs/Light/Lighting.j3md";
        String matDef = "MatDefs/FowLighting.j3md";  

        float size = 512;
        Mesh mesh = new Box(size, 1, size);
        Geometry geom = new Geometry("ground", mesh);
        Material mat = new Material(assetManager, matDef);
        mat.setColor("Diffuse", ColorRGBA.Green);
        mat.setColor("Ambient", ColorRGBA.Green);
        mat.setBoolean("UseMaterialColors", true);
        geom.setMaterial(mat);
        
        geom.move(size, -1, size);
        rootNode.attachChild(geom);
         
        mesh = new Sphere(24, 24, 1);
        Geometry template = new Geometry("sphere", mesh);
        mat = new Material(assetManager, matDef);
        mat.setColor("Diffuse", ColorRGBA.Blue);
        mat.setColor("Ambient", ColorRGBA.Blue);
        mat.setBoolean("UseMaterialColors", true);
        template.setMaterial(mat);
               
        int step = 32;
        for( int i = 0; i < 32; i++ ) {
            for( int j = 0; j < 32; j++ ) {
                float x = i * step + step * 0.5f;
                float z = j * step + step * 0.5f;
                Geometry ball = template.clone(false);
                ball.setLocalTranslation(x, 1, z);
                rootNode.attachChild(ball);
            }
        }
 
        // Position the camera to look at the scene       
        cam.setLocation(new Vector3f(-10f, 9f, -10f));
        cam.setRotation(new Quaternion(0.13405469f, 0.39137974f, -0.057744216f, 0.9085796f));
        
        
        // Create the raw FOW overlay image
        int imageSize = 1024;
        ByteBuffer data = BufferUtils.createByteBuffer(imageSize * imageSize * 4); // square image, four bytes per color
        Image image = new Image(Image.Format.ABGR8, imageSize, imageSize, data, ColorSpace.Linear);
        // Create a raster that we can draw to
        ImageRaster raster = ImageRaster.create(image);
        // Create the texture to set to the FowMap on materials
        Texture2D fowMap = new Texture2D(image);
        
        
        // Set the texture for any material that will take it.
        // This is a JME trick that keeps us from having to remember to set it
        // on every material.
        rootNode.addMatParamOverride(new MatParamOverride(VarType.Texture2D, "FowMap", fowMap));
        
        
        // Put some test data into the fog of war texture
        for( int i = 0; i < 1024; i++ ) {
            for( int j = 0; j < 1024; j++ ) { 
                float f = (1f - i/1024f) * (1f - j/1024f);
                ColorRGBA color = new ColorRGBA(f, f, f, 1.0f);
                raster.setPixel(i, j, color);
            }
        }
    }

    @Override
    public void simpleUpdate( float tpf ) {
    } 
       
}


