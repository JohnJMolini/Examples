apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'

mainClassName='example.Main'

repositories {
  	mavenCentral()
    mavenLocal()
    jcenter()
}

ext.jmeVersion = '3.7.0-alpha3.1'

project(":sim-eth-basic-assets") {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    
    buildDir = rootProject.file("build/assets")
    
    sourceSets {
        main {
            resources {
                srcDir '.'
            }
        }
    }    
}


dependencies {
 
    // Need at least basic JME
   implementation 'org.jmonkeyengine:jme3-core:' + jmeVersion
    implementation 'org.jmonkeyengine:jme3-desktop:' + jmeVersion
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jmeVersion
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jmeVersion
	runtimeOnly 'org.jmonkeyengine:jme3-testdata:' + jmeVersion

    implementation 'org.jmonkeyengine:jme3-jbullet:' + jmeVersion
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jmeVersion
	
	
    // We definitely want a UI
    implementation "com.simsilica:lemur:1.13.0"
    implementation "com.simsilica:lemur-proto:1.13.0"

    // And our base code for sim-etheral, SiO2, etc.
    // (many of these need to be built locally and 'gradle install'ed as of this writing)
    implementation "com.simsilica:sio2:[1.0,)"
    implementation "com.simsilica:sim-math:[1.0,)"
    implementation "com.simsilica:sim-ethereal:[1.0,)"  

    // Standard utility stuff
    implementation 'com.google.guava:guava:19.0'
    implementation 'org.slf4j:slf4j-api:1.7.13'
    runtimeOnly 'org.apache.logging.log4j:log4j-api:2.15.0'
    runtimeOnly 'org.apache.logging.log4j:log4j-core:2.15.0'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl:2.15.0'
    
    runtimeOnly project(':sim-eth-basic-assets')    
}
/*
task runServer(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "example.net.server.GameServer"
    jvmArgs '-Dlog4j.configurationFile=server-log4j2.xml'
    standardInput = System.in
}

// Create a custom server start script in the distribution
task serverStartScript(type: CreateStartScripts) {
    mainClassName = "example.net.server.GameServer"
    applicationName = "server"
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
    defaultJvmOpts = ['-Dlog4j.configurationFile=server-log4j2.xml']
}
*/
/*applicationDistribution.into("bin") {
    from(serverStartScript)
    fileMode = 0755
}

// I think this is ultimately clearer than the above
distributions {
    main {
        contents {
            from(serverStartScript) {
                into "bin"
            }
        }
    }
}*/

// Either way we end up with dupes if we don't do this
distZip {
    duplicatesStrategy = 'exclude'
}

tasks.withType(JavaCompile) {
    options.compilerArgs = ["-Xlint:deprecation", "-Xlint:unchecked"]
}